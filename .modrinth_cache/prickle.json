{"client_side":"required","server_side":"required","game_versions":["1.21","1.21.1"],"id":"aaRl8GiW","slug":"prickle","project_type":"mod","team":"fhxeJ69R","organization":null,"title":"Prickle","description":"Prickle is a JSON based configuration file format brought to Minecraft.","body":"Prickle is a JSON based config format. This mod allows the format to be used in Minecraft! For technical documentation please see the GitHub page.\n\n## FaQ\n\n**What benefits does Prickle offer?**    \nPrickle is based on JSON but adds several useful features like comments and decorators. Prickle is 100% backwards compatible with JSON and supports all of its features, tools, and syntax highlighting.\n\n**Why is this called Prickle?**    \nPrickle is the collective noun for a group of hedgehogs. Hedgehogs are one of my favourite animals and I think they are a fitting metaphor for config files. For example, they both may seen intimidating at first but can be nice once you get to know and understand them.\n\n**Why not use an existing format?**    \nIn the past I have used JSON for my config files but there were several issues such as the lack of comments and default values. Prickle adds these features to JSON while remaining 100% backwards compatible. I have tried other formats like TOML but was disappointed with a lot of their Java implementations. They often lack features I feel are important, have serious bugs, and are no longer being maintained. Minecraft already uses JSON for datapacks and commands, making it a familiar choice for most players.\n\n## Format Specifications\nIn Prickle property values are wrapped in a JSON object. This allows metadata like comments to be attributed to that property.\n\nFor example a standard JSON file would look like this.\n```json\n{\n  \"database_host\": \"192.168.1.222\"\n}\n```\nThe same JSON as a Prickle file would look like this.\n```json\n{\n  \"database_host\": {\n    \"//\": \"The IP address of the database to connect to.\",\n    \"value\": \"192.168.1.222\"\n  }\n}\n```\n\n### Comments\nThe `//` key is reserved for comments. Comments are only used to provide additional context to the reader and should never influence how the file is parsed. Comments can be a JSON string or an array of strings for multiline comments.\n\n```json\n{\n  \"database_host\": {\n    \"//\": [\n      \"The IP address of the database to connect to.\",\n      \"The port can be defined at the end using an :\"\n    ],\n    \"value\": \"192.168.1.222:1273\"\n  }\n}\n```\n\n### Decorators\nDecorators are named comments that convey a specific attribute of the property. A common example of a decorator is `//default` which can be used to display the default value of the property. Like comments, decorators have no influence on how the file is parsed, they only describe how the property will be parsed.\n\nYou may encounter some of the following decorators in prickle files.\n\n- `//default` - The default value of the property.\n- `//reference` - A resource that can be used to learn more, like a link to a wiki page.\n- `//range` - The acceptable range for a value. For example >=5.\n- `//regex` - A regex pattern that the value must match.\n- `//empty-allowed` - If the value can be empty or not. (default is true).\n\n\n### Sponsors\n\n[![Nodecraft sponsor banner](https://assets.blamejared.com/nodecraft/darkhax.jpg)](https://nodecraft.com/r/darkhax)\n\n**This project is sponsored by Nodecraft. Use code [DARKHAX](https://nodecraft.com/r/darkhax) for 30% off your first month of service!**","body_url":null,"published":"2024-08-20T03:21:14.110807Z","updated":"2025-05-19T07:50:24.913681Z","approved":"2024-08-25T22:38:51.514949Z","queued":"2024-08-24T07:39:04.562391Z","status":"approved","requested_status":"approved","moderator_message":null,"license":{"id":"LGPL-2.1-only","name":"GNU Lesser General Public License v2.1 only","url":null},"downloads":1759504,"followers":125,"categories":["library"],"additional_categories":["storage","utility"],"loaders":["fabric","forge","neoforge","quilt"],"versions":["wa4144eQ","QN71wzDR","SA2Er08C","w6vhofa4","zMwBOUkm","1BQoGgdg","xcsNf0v7","WzYqqR3d","jcK0ewZ6","w2ZLwSNM","xu9uKprN","RPheioa7","5uVZfzW7","oJqI3y3k","Zaf9YuDC","FmTbvivp","KzvMibIm","4zOa12VX","mJD5MXL4","6mRtUYZh","nyfft2Bq","DEP3I7qX","UEnsmahs","2INqAJlG","pNfgr7Oh","Vq5saw6j","3aKRiOiA","Eyy6cEfS","LfVoY8QX","m8OGTxU9","VX5BOYQ8","Yoe0M47k","RIOedxsd","aGDJh61g","71uGzL9R","R9ZWDTuu","TvVvPKl9","gmlxcQ89","WnFkNHWx","vHkkdot7","AD8XMDqK","u5HZtlyZ"],"icon_url":"https://cdn.modrinth.com/data/aaRl8GiW/36749d1d2d87d14d7f703b18e8726c7b78057abb.png","issues_url":"https://github.com/Darkhax-Minecraft/PrickleMC/issues","source_url":"https://github.com/Darkhax-Minecraft/PrickleMC","wiki_url":null,"discord_url":null,"donation_urls":[],"gallery":[{"url":"https://cdn.modrinth.com/data/aaRl8GiW/images/7317f7b07a918feff8dbe61df3fa5be576f5941f_350.webp","raw_url":"https://cdn.modrinth.com/data/aaRl8GiW/images/9e37546902138dbbb798e480da3f4f3a43ba6cfc.png","featured":true,"title":"Ranged Integer Preview","description":"And example prickle file featuring a ranged integer that must be between 0 and 100.","created":"2024-08-24T07:20:11.981335Z","ordering":0}],"color":7097595,"thread_id":"4kllbxF4","monetization_status":"monetized"}
