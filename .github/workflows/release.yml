name: Create and Upload Modpack Release

on:
  push:
    branches: [ main ]
    paths:
      - 'config/**'
      - 'minecraft/mods/**'
      - 'minecraft/config/**'
      - 'minecraft/scripts/**'
      - 'minecraft/shaderpacks/**'
      - 'minecraft/resourcepacks/**'
      - 'scripts/**'
      - 'shaderpacks/**'
      - 'resourcepacks/**'
      - 'modrinth.index.json'
      - 'pack.toml'
      - 'build.sh'
      - 'mod_overrides.conf'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install -g modrinth
        
    - name: Analyze changes and determine version bump
      id: version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
        PROJECT_ID: ${{ vars.MODRINTH_PROJECT_ID }}
      run: |
        echo "üîç Getting latest versions from all platforms..."
        
        # Function to compare semantic versions
        version_gt() {
          test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
        }
        
        # Get latest GitHub release version (primary source of truth)
        echo "üìã Checking GitHub releases..."
        LATEST_GITHUB_VERSION=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest | \
          jq -r '.tag_name // "0.0.0"' | sed 's/^v//')
        echo "Latest GitHub release: $LATEST_GITHUB_VERSION"
        
        # Get latest Modrinth version
        LATEST_MODRINTH_VERSION="0.0.0"
        if [ -n "$MODRINTH_TOKEN" ] && [ -n "$PROJECT_ID" ]; then
          LATEST_MODRINTH_VERSION=$(curl -s -H "Authorization: $MODRINTH_TOKEN" \
            "https://api.modrinth.com/v2/project/$PROJECT_ID/version" | \
            jq -r '.[0].version_number // "0.0.0"' 2>/dev/null || echo "0.0.0")
          echo "Latest Modrinth version: $LATEST_MODRINTH_VERSION"
        fi
        
        # Use the highest version as the baseline
        CURRENT_VERSION="$LATEST_GITHUB_VERSION"
        if version_gt "$LATEST_MODRINTH_VERSION" "$CURRENT_VERSION"; then
          CURRENT_VERSION="$LATEST_MODRINTH_VERSION"
        fi
        
        echo "Current version: $CURRENT_VERSION"
        
        # Generate new version (increment patch version)
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        patch=$((patch + 1))
        NEW_VERSION="$major.$minor.$patch"
        echo "New version: $NEW_VERSION"
        
        # Output for next steps
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Build .mrpack file
      run: |
        echo "üîß Building .mrpack file..."
        chmod +x build.sh
        ./build.sh
        
        # Find the generated .mrpack file
        MRPACK_FILE=$(find . -name "*.mrpack" -type f | head -1)
        if [ -z "$MRPACK_FILE" ]; then
          echo "‚ùå No .mrpack file found!"
          exit 1
        fi
        
        echo "‚úÖ Found .mrpack file: $MRPACK_FILE"
        echo "mrpack_file=$MRPACK_FILE" >> $GITHUB_OUTPUT
      id: build
      
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        MRPACK_FILE="${{ steps.build.outputs.mrpack_file }}"
        
        echo "üì¶ Creating GitHub release for version $VERSION..."
        
        # Create release
        RELEASE_NOTES="## Survival Not Guaranteed v$VERSION
        
        üéÆ **Modpack Release** - Ready for download and installation
        
        ### üöÄ What's New
        - Latest mod configurations and updates
        - External download optimization (100% mirror coverage)
        - Automatic server integration included
        - Compatible with Minecraft 1.21.1, NeoForge 21.1.180+
        
        ### üì¶ Installation
        1. Download the \`.mrpack\` file below
        2. Import into Modrinth App, PrismLauncher, or compatible launcher
        3. Launch and enjoy!
        
        ### üåê Server Access
        The modpack automatically adds our community server to your multiplayer list:
        - **Server**: survival-not-guaranteed.modrinth.gg
        - **No manual setup required**
        
        ### üîß Technical Details
        - **143 mods** with 100% external downloads
        - **Optimized performance** with smart mod resolution
        - **~100% size reduction** (758KB vs 2GB+)
        - **Multi-platform support** (Modrinth + CurseForge mirrors)"
        
        # Create the release
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"tag_name\": \"v$VERSION\",
            \"name\": \"Survival Not Guaranteed v$VERSION\",
            \"body\": $(echo "$RELEASE_NOTES" | jq -Rs .),
            \"draft\": false,
            \"prerelease\": false
          }" \
          "https://api.github.com/repos/${{ github.repository }}/releases"
        
        # Get the release ID
        RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | \
          jq -r '.id')
        
        echo "üì§ Uploading .mrpack file to release..."
        
        # Upload the .mrpack file
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/octet-stream" \
          --data-binary "@$MRPACK_FILE" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(basename "$MRPACK_FILE")"
        
        echo "‚úÖ GitHub release created successfully!"
        
    - name: Upload to Modrinth
      if: ${{ vars.MODRINTH_PROJECT_ID != '' }}
      env:
        MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
        PROJECT_ID: ${{ vars.MODRINTH_PROJECT_ID }}
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        MRPACK_FILE="${{ steps.build.outputs.mrpack_file }}"
        
        echo "üîÑ Enhanced Modrinth sync and upload process..."
        
        # Function to upload to Modrinth
        upload_to_modrinth() {
          local file_path="$1"
          local version="$2"
          local changelog="$3"
          
          echo "üì§ Uploading $version to Modrinth..."
          
          # Escape special characters in changelog for JSON
          local escaped_changelog=$(echo "$changelog" | sed 's/"/\\"/g' | sed 's/\$/\\$/g' | tr '\n' ' ' | tr -d '\000-\037')
          
          # Get the actual project ID from the project slug if needed
          local actual_project_id="$PROJECT_ID"
          if [[ "$PROJECT_ID" == *"-"* ]]; then
            echo "üîç Converting project slug to project ID..."
            local project_response=$(curl -s "https://api.modrinth.com/v2/project/$PROJECT_ID" 2>/dev/null || echo "")
            if echo "$project_response" | jq -e '.id' >/dev/null 2>&1; then
              actual_project_id=$(echo "$project_response" | jq -r '.id')
              echo "‚úÖ Found project ID: $actual_project_id"
            else
              echo "‚ùå Failed to resolve project slug to ID"
              return 1
            fi
          fi
          
          # Create JSON data using printf to avoid heredoc issues
          printf '{"name":"Survival Not Guaranteed v%s","version_number":"%s","changelog":"%s","dependencies":[],"game_versions":["1.21.1"],"version_type":"release","loaders":["neoforge"],"featured":true,"project_id":"%s","file_parts":["mrpack-file"]}' "$version" "$version" "$escaped_changelog" "$actual_project_id" > /tmp/modrinth_data.json
          
          # Debug: Show the JSON being sent
          echo "üîç JSON being sent to Modrinth:"
          cat /tmp/modrinth_data.json
          echo ""
          
          # Upload using the JSON file
          local response=$(curl -X POST "https://api.modrinth.com/v2/version" \
            -H "Authorization: $MODRINTH_TOKEN" \
            -H "Content-Type: multipart/form-data" \
            -F "data=@/tmp/modrinth_data.json" \
            -F "mrpack-file=@$file_path" 2>/dev/null || echo "")
          
          if echo "$response" | jq -e '.id' >/dev/null 2>&1; then
            echo "‚úÖ Successfully uploaded $version to Modrinth"
            return 0
          else
            echo "‚ùå Failed to upload $version to Modrinth"
            echo "Response: $response"
            return 1
          fi
        }
        
        # Check if version already exists
        echo "üîç Checking if version $VERSION exists on Modrinth..."
        EXISTING_VERSION=$(curl -s -H "Authorization: $MODRINTH_TOKEN" \
          "https://api.modrinth.com/v2/project/$PROJECT_ID/version/$VERSION" 2>/dev/null || echo "")
        
        if echo "$EXISTING_VERSION" | jq -e '.id' >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  Version $VERSION already exists on Modrinth, skipping upload"
          exit 0
        else
          echo "‚úÖ Version $VERSION is new, proceeding with upload..."
        fi
        
        # Create changelog
        CHANGELOG="Survival Not Guaranteed v$VERSION - Automated release with latest modpack changes. Features multi-platform mod support (Modrinth + CurseForge), mirror URL redundancy, and smart mod resolution. Minecraft 1.21.1, NeoForge 21.1.180+. Download and import into Modrinth App, PrismLauncher, or other compatible launcher."
        
        # Upload to Modrinth
        if upload_to_modrinth "$MRPACK_FILE" "$VERSION" "$CHANGELOG"; then
          echo "üéâ Successfully uploaded to Modrinth!"
        else
          echo "‚ùå Failed to upload to Modrinth"
          exit 1
        fi
        
    - name: Update modrinth.index.json version
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        echo "üìù Updating modrinth.index.json version to $VERSION..."
        
        # Update version in modrinth.index.json
        if [ -f "modrinth.index.json" ]; then
          jq --arg version "$VERSION" '.versionId = $version' modrinth.index.json > modrinth.index.json.tmp
          mv modrinth.index.json.tmp modrinth.index.json
          echo "‚úÖ Updated modrinth.index.json version to $VERSION"
        fi
        
    - name: Commit and push version update
      run: |
        VERSION="${{ steps.version.outputs.new_version }}"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        # Commit changes
        git add modrinth.index.json
        git commit -m "Update version to $VERSION

        - Automated version bump from GitHub Actions
        - Updated modrinth.index.json version field
        - Release $VERSION created and uploaded to platforms"
        
        # Push changes
        git push origin main
        
        echo "‚úÖ Version update committed and pushed"
