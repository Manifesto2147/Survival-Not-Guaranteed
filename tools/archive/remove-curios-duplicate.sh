#!/bin/bash

# Remove Duplicate Curios - Safe Cleanup Script
# Removes the old Curios version (9.0.15) and keeps the newer one (9.5.1)

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

print_info() { echo -e "${BLUE}ℹ️${NC} $1"; }
print_warning() { echo -e "${YELLOW}⚠️${NC} $1"; }
print_error() { echo -e "${RED}❌${NC} $1"; }
print_success() { echo -e "${GREEN}✅${NC} $1"; }

MANIFEST_FILE="modrinth.index.json"
BACKUP_DIR="backup/curios-cleanup"

echo "🧹 Curios Duplicate Cleanup"
echo "============================"
echo ""

# Create backup
print_info "Creating backup before making changes..."
mkdir -p "$BACKUP_DIR"
timestamp=$(date +%Y%m%d_%H%M%S)
cp "$MANIFEST_FILE" "$BACKUP_DIR/modrinth.index.json.$timestamp"
print_success "Backup created: $BACKUP_DIR/modrinth.index.json.$timestamp"
echo ""

# Show current Curios mods
print_info "Current Curios mods in manifest:"
jq -r '.files[] | select(.path | contains("curios")) | "   • \(.path)"' "$MANIFEST_FILE"
echo ""

# Identify the old Curios to remove
OLD_CURIOS_PATH="mods/curios-neoforge-9.0.15+1.21.1.jar"
NEW_CURIOS_PATH="mods/curios-neoforge-9.5.1+1.21.1.jar"

# Verify both exist
old_exists=$(jq -r --arg path "$OLD_CURIOS_PATH" '.files[] | select(.path == $path) | .path' "$MANIFEST_FILE")
new_exists=$(jq -r --arg path "$NEW_CURIOS_PATH" '.files[] | select(.path == $path) | .path' "$MANIFEST_FILE")

if [[ -z "$old_exists" ]]; then
    print_error "Old Curios version not found in manifest: $OLD_CURIOS_PATH"
    exit 1
fi

if [[ -z "$new_exists" ]]; then
    print_error "New Curios version not found in manifest: $NEW_CURIOS_PATH"
    exit 1
fi

print_info "Removing duplicate: $OLD_CURIOS_PATH"
print_info "Keeping current: $NEW_CURIOS_PATH"
echo ""

# Remove the old Curios entry from manifest
print_info "Updating manifest..."
temp_manifest=$(mktemp)
jq --arg old_path "$OLD_CURIOS_PATH" '.files = [.files[] | select(.path != $old_path)]' "$MANIFEST_FILE" > "$temp_manifest"

# Validate the updated manifest
if jq empty "$temp_manifest" 2>/dev/null; then
    # Check that we only removed one entry
    old_count=$(jq '.files | length' "$MANIFEST_FILE")
    new_count=$(jq '.files | length' "$temp_manifest")
    removed_count=$((old_count - new_count))
    
    if [[ "$removed_count" -eq 1 ]]; then
        mv "$temp_manifest" "$MANIFEST_FILE"
        print_success "Successfully removed duplicate Curios mod"
        print_success "Manifest updated: $old_count → $new_count mods (-1)"
        echo ""
        
        # Show current Curios mods after cleanup
        print_info "Remaining Curios mods:"
        jq -r '.files[] | select(.path | contains("curios")) | "   • \(.path)"' "$MANIFEST_FILE"
        echo ""
        
        # Verify no duplicates remain
        curios_count=$(jq -r '.files[] | select(.path | contains("curios")) | .path' "$MANIFEST_FILE" | wc -l)
        if [[ "$curios_count" -eq 2 ]]; then
            # We expect 2: the main curios mod and the gravestone compat mod
            print_success "✅ Cleanup successful - no Curios duplicates remain"
        else
            print_warning "⚠️  Unexpected number of Curios-related mods: $curios_count"
        fi
        
        # Auto-commit the change
        print_info "Auto-committing the cleanup..."
        git add "$MANIFEST_FILE" 2>/dev/null || true
        git commit -m "Remove duplicate Curios mod

- Removed curios-neoforge-9.0.15+1.21.1.jar (old version)
- Kept curios-neoforge-9.5.1+1.21.1.jar (current version)
- No mods depend on the old version
- Both versions have identical API compatibility
- Reduces mod count by 1 and eliminates potential conflicts

Generated by remove-curios-duplicate.sh" 2>/dev/null || print_warning "Git commit failed (not a git repository or no changes)"
        
        echo ""
        print_success "🎉 Curios cleanup completed successfully!"
        echo ""
        echo "📋 Summary:"
        echo "   • Removed: $OLD_CURIOS_PATH"
        echo "   • Kept: $NEW_CURIOS_PATH"
        echo "   • Total mods: $old_count → $new_count"
        echo "   • Backup: $BACKUP_DIR/modrinth.index.json.$timestamp"
        echo ""
        print_info "Next steps:"
        echo "   1. Test your modpack to ensure everything works"
        echo "   2. Run './validate-dependencies.sh' to verify no issues"
        echo "   3. If problems occur, restore with:"
        echo "      cp '$BACKUP_DIR/modrinth.index.json.$timestamp' '$MANIFEST_FILE'"
        
    else
        print_error "Unexpected number of entries removed: $removed_count (expected 1)"
        rm -f "$temp_manifest"
        exit 1
    fi
else
    print_error "Generated manifest is invalid JSON"
    rm -f "$temp_manifest"
    exit 1
fi
